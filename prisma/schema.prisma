datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

model Employee {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  job_title     String
  department_id String   @db.ObjectId
  manager_id    String?  @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  department     Department              @relation("Department_Employees", fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manager        Employee?               @relation("Employee_Manager", fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates   Employee[]              @relation("Employee_Manager")
  leave_requests LeaveRequest[]
  evaluations    PerformanceEvaluation[] @relation("Evaluator")
  evaluationsBy  PerformanceEvaluation[] @relation("Evaluatee")
  payroll        Payroll[]

  manager_department_id String?     @db.ObjectId
  manager_department    Department?

  roqUserId String @unique
  tenantId  String

  @@map("employee")
}

model LeaveRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employee_id String   @db.ObjectId
  start_date  DateTime
  end_date    DateTime
  leave_type  String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employee_id], references: [id])

  @@map("leave_request")
}

model Department {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  department_manager_id String?  @unique @db.ObjectId
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  department_manager Employee?  @relation(fields: [department_manager_id], references: [id])
  employees          Employee[] @relation("Department_Employees")

  @@map("department")
}

model PerformanceEvaluation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  evaluator_id String   @db.ObjectId
  evaluatee_id String   @db.ObjectId
  rating       Int
  feedback     String
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  evaluator Employee @relation("Evaluator", fields: [evaluator_id], references: [id])
  evaluatee Employee @relation("Evaluatee", fields: [evaluatee_id], references: [id])

  @@map("performance_evaluation")
}

model Payroll {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  employee_id   String   @db.ObjectId
  salary        Float
  pay_frequency Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  employee Employee  @relation(fields: [employee_id], references: [id])
  payslips Payslip[]

  @@map("payroll")
}

model Payslip {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  payroll_id   String   @db.ObjectId
  date         DateTime
  gross_salary Float
  net_salary   Float
  deductions   Float
  bonuses      Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  payroll Payroll @relation(fields: [payroll_id], references: [id])

  @@map("payslip")
}
